import React, { useState } from "react";
import { db } from "../bitacoraDB";
import { useLiveQuery } from "dexie-react-hooks";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import "./BitacoraTransporte.css";

// Logo (gu치rdalo en public/logo.png o en src/logo.png)
import logo from "/chicapala/logopdf.png";

// Todas las categor칤as y elementos
const categorias = {
    "Fluidos": [
        "Aceite de motor", "Aceite direcci칩n hidr치ulica", "Aceite transmisi칩n", "Aceite diferencial",
        "Agua / Anticongelante", "Refrigerante", "L칤quido de frenos",
        "Nivel l칤quido de bater칤a", "Nivel l칤quido chisgueteros"
    ],
    "Frenos y Neum치ticos": [
        "Desgaste de llantas", "Presi칩n de llantas", "Rines", "Birlos", "Tuercas",
        "Tuber칤as/mangueras frenos fugas", "Pedal freno", "Bomba frenos", "Llanta auxiliar"
    ],
    "Direcci칩n": [
        "Volante", "Caja de direcci칩n (sinfin)", "Bisletas", "Dep칩sito aceite direcci칩n hidr치ulica"
    ],
    "Suspensi칩n": [
        "Muelles",
        "Amortiguador delantero izquierdo", "Amortiguador delantero derecho",
        "Amortiguador trasero izquierdo", "Amortiguador trasero derecho",
        "Barra de torsi칩n", "Resortes",
        "Horquilla delantera izquierda", "Horquilla delantera derecha",
        "Horquilla trasera izquierda", "Horquilla trasera derecha",
        "Topes de goma",
        "R칩tula delantera izquierda", "R칩tula delantera derecha",
        "R칩tula trasera izquierda", "R칩tula trasera derecha"
    ],
    "Sistema El칠ctrico": [
        "Bater칤a terminales", "Alternador", "Marcha", "Switch",
        "Luz blanca baja", "Luz blanca alta", "Luces cuartos",
        "Direccionales", "Intermitentes", "Luz freno", "Claxon",
        "Luces tablero", "Luces interiores", "Luces estribo",
        "Fusibles", "Limpiaparabrisas"
    ],
    "Transmisi칩n": [
        "Caja de velocidades", "Pedal clutch", "Card치n", "Crucetas",
        "Diferencial", "Flechas", "Palanca de velocidades"
    ],
    "Sistema Mec치nico": [
        "Tapa de balancines", "Culata (fugas)", "M칰ltiple de admisi칩n", "M칰ltiple de escape",
        "Ret칠n cig칲e침al", "Tap칩n del c치rter", "Tapones de fundici칩n",
        "Bomba de agua", "Radiador", "Mangueras", "Ventilador", "Bandas"
    ],
    "Carrocer칤a y Chasis": [
        "Parabrisas", "Medall칩n", "Ventanas", "Estribo", "Piso", "Lienzos",
        "Carrocer칤a", "Molduras", "Muelles", "Abrazaderas chasis",
        "Asientos", "Asiento conductor", "Cintur칩n seguridad",
        "Tubo de escape", "Escape", "Cofre", "Defensa delantera",
        "Defensa trasera", "Cajuela", "Chasis"
    ],
    "Tablero": [
        "Medidor gasolina/diesel", "Medidor presi칩n aceite", "Medidor temperatura", "Medidor carga",
        "Tac칩metro", "Veloc칤metro", "Od칩metro",
        "Luz direccional izquierda", "Luz direccional derecha", "Luz intermitentes",
        "Luz testigo motor", "Luz altas", "Luz bajas", "Luz cintur칩n seguridad",
        "Bot칩n luces interiores", "Bot칩n luces cabina", "Bot칩n limpiaparabrisas"
    ]
};

export default function BitacoraTransporte() {
    const [orden, setOrden] = useState("elemento");

    // LiveQuery para obtener revisiones y datos de unidad
    const revisiones = useLiveQuery(async () => {
        return await db.revisiones.orderBy(orden).toArray();
    }, [orden]);

    const datosUnidad = useLiveQuery(() => db.datosUnidad.get(1));

    // Inicializar BD
    const inicializar = async () => {
        for (const [categoria, items] of Object.entries(categorias)) {
            for (const elemento of items) {
                const existe = await db.revisiones.where({ categoria, elemento }).first();
                if (!existe) {
                    await db.revisiones.add({
                        categoria,
                        elemento,
                        estado: false,
                        observaciones: "",
                        fechaModificacion: new Date().toISOString()
                    });
                }
            }
        }
        if (!datosUnidad) {
            await db.datosUnidad.put({
                id: 1,
                unidad: "",
                modelo: "",
                operador: "",
                fechaModificacion: new Date().toISOString()
            });
        }
    };

    // Actualizar revisi칩n
    const actualizarRevision = async (id, cambios) => {
        await db.revisiones.update(id, {
            ...cambios,
            fechaModificacion: new Date().toISOString()
        });
    };

    // Actualizar datos unidad
    const actualizarUnidad = async (cambios) => {
        await db.datosUnidad.put({
            id: 1,
            unidad: cambios.unidad ?? datosUnidad?.unidad ?? "",
            modelo: cambios.modelo ?? datosUnidad?.modelo ?? "",
            operador: cambios.operador ?? datosUnidad?.operador ?? "",
            fechaModificacion: new Date().toISOString()
        });
    };

    // Exportar PDF en tama침o carta con logo y colores
    const exportarPDF = () => {
        const doc = new jsPDF({
            format: "letter", // 游늯 tama침o carta
            unit: "pt"
        });

        // Logo en esquina superior izquierda
        if (logo) {
            doc.addImage(logo, "PNG", 40, 40, 60, 60);
        }

        // Encabezado
        doc.setFontSize(18);
        doc.text("Bit치cora de Revisi칩n - Transporte P칰blico", 120, 50);

        doc.setFontSize(11);
        doc.text(`Unidad: ${datosUnidad?.unidad || ""}`, 120, 70);
        doc.text(`Modelo: ${datosUnidad?.modelo || ""}`, 120, 85);
        doc.text(`Operador: ${datosUnidad?.operador || ""}`, 120, 100);

        // Colores por categor칤a
        const colores = {
            "Fluidos": [0, 123, 255],
            "Frenos y Neum치ticos": [40, 167, 69],
            "Direcci칩n": [23, 162, 184],
            "Suspensi칩n": [111, 66, 193],
            "Sistema El칠ctrico": [253, 126, 20],
            "Transmisi칩n": [32, 201, 151],
            "Sistema Mec치nico": [232, 62, 140],
            "Carrocer칤a y Chasis": [52, 58, 64],
            "Tablero": [255, 193, 7]
        };

        Object.keys(categorias).forEach((cat, idx) => {
            const datos = revisiones?.filter(r => r.categoria === cat) || [];
            if (datos.length > 0) {
                // Calcular posici칩n Y inicial
                let startY = idx === 0 ? 130 : (doc.lastAutoTable?.finalY || 130) + 40;

                // T칤tulo de categor칤a ANTES de la tabla
                doc.setFontSize(13);
                doc.setTextColor(...(colores[cat] || [0, 0, 0]));
                doc.text(String(cat), 40, startY - 10);
                doc.setTextColor(0, 0, 0);

                // Ahora la tabla
                autoTable(doc, {
                    startY: startY,
                    head: [["Elemento", "Estado", "Observaciones", "칔ltima modificaci칩n"]],
                    body: datos.map(r => [
                        r.elemento,
                        r.estado ? "Bien" : "x",
                        r.observaciones || "",
                        new Date(r.fechaModificacion).toLocaleString()
                    ]),
                    theme: "grid",
                    headStyles: {
                        fillColor: colores[cat] || [0, 102, 204],
                        textColor: cat === "Tablero" ? [0, 0, 0] : 255,
                        fontStyle: "bold"
                    },
                    alternateRowStyles: { fillColor: [245, 245, 245] },
                    margin: { left: 40, right: 40 }
                });
            }
        });


        doc.save("bitacora.pdf");
    };

    return (
        <div className="contenedor-bitacora">
            <h1>Bit치cora de Revisi칩n - Transporte P칰blico</h1>

            {/* Encabezado unidad */}
            <div className="unidad-info">
                <label>
                    Unidad:
                    <input
                        type="text"
                        value={datosUnidad?.unidad || ""}
                        onChange={e => actualizarUnidad({ unidad: e.target.value })}
                    />
                </label>
                <label>
                    Modelo:
                    <input
                        type="text"
                        value={datosUnidad?.modelo || ""}
                        onChange={e => actualizarUnidad({ modelo: e.target.value })}
                    />
                </label>
                <label>
                    Operador:
                    <input
                        type="text"
                        value={datosUnidad?.operador || ""}
                        onChange={e => actualizarUnidad({ operador: e.target.value })}
                    />
                </label>
            </div>

            {/* Botones */}
            <div className="acciones">
                <button onClick={inicializar}>Inicializar</button>
                <button onClick={() => setOrden("elemento")}>Ordenar por nombre</button>
                <button onClick={() => setOrden("fechaModificacion")}>Ordenar por fecha</button>
                <button onClick={exportarPDF}>Exportar PDF</button>
            </div>

            {/* Tablas */}
            {Object.keys(categorias).map(cat => {
                // Asignar clase CSS seg칰n categor칤a
                const claseCategoria = {
                    "Fluidos": "fluids",
                    "Frenos y Neum치ticos": "brakes",
                    "Direcci칩n": "steering",
                    "Suspensi칩n": "suspension",
                    "Sistema El칠ctrico": "electric",
                    "Transmisi칩n": "transmission",
                    "Sistema Mec치nico": "mechanic",
                    "Carrocer칤a y Chasis": "body",
                    "Tablero": "dashboard"
                }[cat];

                return (
                    <div key={cat}>
                        <h2 className={claseCategoria}>{cat}</h2>
                        <table className={`tabla-bitacora tabla-${claseCategoria}`}>
                            <thead>
                                <tr>
                                    <th>Elemento</th>
                                    <th>Estado</th>
                                    <th>Observaciones</th>
                                    <th>칔ltima modificaci칩n</th>
                                </tr>
                            </thead>
                            <tbody>
                                {revisiones
                                    ?.filter(r => r.categoria === cat)
                                    .map(r => (
                                        <tr key={r.id}>
                                            <td>{r.elemento}</td>
                                            <td>
                                                <input
                                                    type="checkbox"
                                                    checked={r.estado}
                                                    onChange={e =>
                                                        actualizarRevision(r.id, { estado: e.target.checked })
                                                    }
                                                />
                                            </td>
                                            <td>
                                                <input
                                                    type="text"
                                                    value={r.observaciones}
                                                    onChange={e =>
                                                        actualizarRevision(r.id, { observaciones: e.target.value })
                                                    }
                                                />
                                            </td>
                                            <td>{new Date(r.fechaModificacion).toLocaleString()}</td>
                                        </tr>
                                    ))}
                            </tbody>
                        </table>
                    </div>
                );
            })}
        </div>
    );
}
